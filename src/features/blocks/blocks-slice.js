import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'
import blocksAdapter from './blocks-adapter'

export const getAllBlocks = async () => {
    const response = await fetch('http://localhost:4000/customBlocks')
    return response.json()
}

export const fetchSavedBlocks = createAsyncThunk(
    'blocks/fetchSavedBlocks',
    async () => {
        const blocksResponse = await getAllBlocks()
        return blocksResponse
    }
)

export const blocksSlice = createSlice({
    name: 'counter',
    initialState: blocksAdapter.getInitialState({
        initialized: false,
        loading: 'idle',
        error: null,
    }),
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {},
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(fetchSavedBlocks.pending, (state) => {
                state.status = 'loading'
            })
            .addCase(fetchSavedBlocks.fulfilled, (state, action) => {
                state.status = 'idle'
                // state.value += action.payload;
                blocksAdapter.upsertMany(state, action.payload)
            })
    },
})

// export const { increment, decrement, incrementByAmount } = blocksSlice.actions;

export default blocksSlice.reducer
